{"version":3,"file":"babylon.ktx2Decoder.js","mappings":"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","sources":["webpack://KTX2DECODER/webpack/universalModuleDefinition","webpack://KTX2DECODER/webpack/bootstrap","webpack://KTX2DECODER/webpack/runtime/define property getters","webpack://KTX2DECODER/webpack/runtime/global","webpack://KTX2DECODER/webpack/runtime/hasOwnProperty shorthand","webpack://KTX2DECODER/webpack/runtime/make namespace object","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/transcoder.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/ktx2FileReader.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Misc/dataReader.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/wasmMemoryManager.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/transcoderManager.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_ASTC.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_BC7.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_RGBA_UNORM.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_RGBA_SRGB.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_R8_UNORM.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/liteTranscoder_UASTC_RG8_UNORM.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/Transcoders/mscTranscoder.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/zstddec.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/transcodeDecisionTree.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/ktx2Decoder.ts","webpack://KTX2DECODER/../../../tools/ktx2Decoder/src/legacy/legacy.ts","webpack://KTX2DECODER/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-ktx2decoder\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-ktx2decoder\"] = factory();\n\telse\n\t\troot[\"KTX2DECODER\"] = factory();\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { WASMMemoryManager } from \"./wasmMemoryManager\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"./ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum sourceTextureFormat {\r\n    ETC1S,\r\n    UASTC4x4,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport enum transcodeTarget {\r\n    ASTC_4x4_RGBA,\r\n    BC7_RGBA,\r\n    BC3_RGBA,\r\n    BC1_RGB,\r\n    PVRTC1_4_RGBA,\r\n    PVRTC1_4_RGB,\r\n    ETC2_RGBA,\r\n    ETC1_RGB,\r\n    RGBA32,\r\n    R8,\r\n    RG8,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class Transcoder {\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return false;\r\n    }\r\n\r\n    public static Name = \"Transcoder\";\r\n\r\n    public getName(): string {\r\n        return Transcoder.Name;\r\n    }\r\n\r\n    public initialize(): void {}\r\n\r\n    public needMemoryManager(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public setMemoryManager(memoryMgr: WASMMemoryManager): void {}\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return Promise.resolve(null);\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { DataReader } from \"./Misc/dataReader\";\r\nimport { sourceTextureFormat } from \"./transcoder\";\r\n\r\n/** @internal */\r\nexport enum SupercompressionScheme {\r\n    None = 0,\r\n    BasisLZ = 1,\r\n    ZStandard = 2,\r\n    ZLib = 3,\r\n}\r\n\r\nconst enum DFDModel {\r\n    ETC1S = 163,\r\n    UASTC = 166,\r\n}\r\n\r\nconst enum DFDChannel_ETC1S {\r\n    RGB = 0,\r\n    RRR = 3,\r\n    GGG = 4,\r\n    AAA = 15,\r\n}\r\n\r\nconst enum DFDChannel_UASTC {\r\n    RGB = 0,\r\n    RGBA = 3,\r\n    RRR = 4,\r\n    RRRG = 5,\r\n}\r\n\r\nconst enum DFDTransferFunction {\r\n    linear = 1,\r\n    sRGB = 2,\r\n}\r\n\r\n/** @internal */\r\nexport interface IKTX2_Header {\r\n    vkFormat: number;\r\n    typeSize: number;\r\n    pixelWidth: number;\r\n    pixelHeight: number;\r\n    pixelDepth: number;\r\n    layerCount: number;\r\n    faceCount: number;\r\n    levelCount: number;\r\n    supercompressionScheme: number;\r\n    dfdByteOffset: number;\r\n    dfdByteLength: number;\r\n    kvdByteOffset: number;\r\n    kvdByteLength: number;\r\n    sgdByteOffset: number;\r\n    sgdByteLength: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IKTX2_Level {\r\n    byteOffset: number;\r\n    byteLength: number;\r\n    uncompressedByteLength: number;\r\n}\r\n\r\ninterface IKTX2_Sample {\r\n    bitOffset: number;\r\n    bitLength: number;\r\n    channelType: number;\r\n    channelFlags: number;\r\n    samplePosition: number[];\r\n    sampleLower: number;\r\n    sampleUpper: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IKTX2_DFD {\r\n    vendorId: number;\r\n    descriptorType: number;\r\n    versionNumber: number;\r\n    descriptorBlockSize: number;\r\n    colorModel: number;\r\n    colorPrimaries: number;\r\n    transferFunction: number;\r\n    flags: number;\r\n    texelBlockDimension: {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n        w: number;\r\n    };\r\n    bytesPlane: Array<number>;\r\n    numSamples: number;\r\n    samples: Array<IKTX2_Sample>;\r\n}\r\n\r\n/** @internal */\r\nexport interface IKTX2_ImageDesc {\r\n    imageFlags: number;\r\n    rgbSliceByteOffset: number;\r\n    rgbSliceByteLength: number;\r\n    alphaSliceByteOffset: number;\r\n    alphaSliceByteLength: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IKTX2_SupercompressionGlobalData {\r\n    endpointCount?: number;\r\n    selectorCount?: number;\r\n    endpointsByteLength?: number;\r\n    selectorsByteLength?: number;\r\n    tablesByteLength?: number;\r\n    extendedByteLength?: number;\r\n    imageDescs?: Array<IKTX2_ImageDesc>;\r\n    endpointsData?: Uint8Array;\r\n    selectorsData?: Uint8Array;\r\n    tablesData?: Uint8Array;\r\n    extendedData?: Uint8Array;\r\n}\r\n\r\nexport class KTX2FileReader {\r\n    private _data: Uint8Array;\r\n    private _header: IKTX2_Header;\r\n    private _levels: Array<IKTX2_Level>;\r\n    private _dfdBlock: IKTX2_DFD;\r\n    private _supercompressionGlobalData: IKTX2_SupercompressionGlobalData;\r\n\r\n    /**\r\n     * Will throw an exception if the file can't be parsed\r\n     * @param data\r\n     */\r\n    constructor(data: Uint8Array) {\r\n        this._data = data;\r\n    }\r\n\r\n    public get data(): Uint8Array {\r\n        return this._data;\r\n    }\r\n\r\n    public get header(): IKTX2_Header {\r\n        return this._header;\r\n    }\r\n\r\n    public get levels(): Array<IKTX2_Level> {\r\n        return this._levels;\r\n    }\r\n\r\n    public get dfdBlock(): IKTX2_DFD {\r\n        return this._dfdBlock;\r\n    }\r\n\r\n    public get supercompressionGlobalData(): IKTX2_SupercompressionGlobalData {\r\n        return this._supercompressionGlobalData;\r\n    }\r\n\r\n    public isValid() {\r\n        return KTX2FileReader.IsValid(this._data);\r\n    }\r\n\r\n    public parse() {\r\n        let offsetInFile = 12; // skip the header\r\n\r\n        /**\r\n         * Get the header\r\n         */\r\n        const hdrReader = new DataReader(this._data, offsetInFile, 17 * 4);\r\n\r\n        const header = (this._header = {\r\n            vkFormat: hdrReader.readUint32(),\r\n            typeSize: hdrReader.readUint32(),\r\n            pixelWidth: hdrReader.readUint32(),\r\n            pixelHeight: hdrReader.readUint32(),\r\n            pixelDepth: hdrReader.readUint32(),\r\n            layerCount: hdrReader.readUint32(),\r\n            faceCount: hdrReader.readUint32(),\r\n            levelCount: hdrReader.readUint32(),\r\n            supercompressionScheme: hdrReader.readUint32(),\r\n\r\n            dfdByteOffset: hdrReader.readUint32(),\r\n            dfdByteLength: hdrReader.readUint32(),\r\n            kvdByteOffset: hdrReader.readUint32(),\r\n            kvdByteLength: hdrReader.readUint32(),\r\n            sgdByteOffset: hdrReader.readUint64(),\r\n            sgdByteLength: hdrReader.readUint64(),\r\n        });\r\n\r\n        if (header.pixelDepth > 0) {\r\n            throw new Error(`Failed to parse KTX2 file - Only 2D textures are currently supported.`);\r\n        }\r\n\r\n        if (header.layerCount > 1) {\r\n            throw new Error(`Failed to parse KTX2 file - Array textures are not currently supported.`);\r\n        }\r\n\r\n        if (header.faceCount > 1) {\r\n            throw new Error(`Failed to parse KTX2 file - Cube textures are not currently supported.`);\r\n        }\r\n\r\n        offsetInFile += hdrReader.byteOffset;\r\n\r\n        /**\r\n         * Get the levels\r\n         */\r\n        let levelCount = Math.max(1, header.levelCount);\r\n\r\n        const levelReader = new DataReader(this._data, offsetInFile, levelCount * 3 * (2 * 4));\r\n\r\n        const levels: Array<IKTX2_Level> = (this._levels = []);\r\n\r\n        while (levelCount--) {\r\n            levels.push({\r\n                byteOffset: levelReader.readUint64(),\r\n                byteLength: levelReader.readUint64(),\r\n                uncompressedByteLength: levelReader.readUint64(),\r\n            });\r\n        }\r\n\r\n        offsetInFile += levelReader.byteOffset;\r\n\r\n        /**\r\n         * Get the data format descriptor (DFD) blocks\r\n         */\r\n        const dfdReader = new DataReader(this._data, header.dfdByteOffset, header.dfdByteLength);\r\n\r\n        const dfdBlock = (this._dfdBlock = {\r\n            vendorId: dfdReader.skipBytes(4 /* skip totalSize */).readUint16(),\r\n            descriptorType: dfdReader.readUint16(),\r\n            versionNumber: dfdReader.readUint16(),\r\n            descriptorBlockSize: dfdReader.readUint16(),\r\n            colorModel: dfdReader.readUint8(),\r\n            colorPrimaries: dfdReader.readUint8(),\r\n            transferFunction: dfdReader.readUint8(),\r\n            flags: dfdReader.readUint8(),\r\n            texelBlockDimension: {\r\n                x: dfdReader.readUint8() + 1,\r\n                y: dfdReader.readUint8() + 1,\r\n                z: dfdReader.readUint8() + 1,\r\n                w: dfdReader.readUint8() + 1,\r\n            },\r\n            bytesPlane: [\r\n                dfdReader.readUint8() /* bytesPlane0 */,\r\n                dfdReader.readUint8() /* bytesPlane1 */,\r\n                dfdReader.readUint8() /* bytesPlane2 */,\r\n                dfdReader.readUint8() /* bytesPlane3 */,\r\n                dfdReader.readUint8() /* bytesPlane4 */,\r\n                dfdReader.readUint8() /* bytesPlane5 */,\r\n                dfdReader.readUint8() /* bytesPlane6 */,\r\n                dfdReader.readUint8() /* bytesPlane7 */,\r\n            ],\r\n            numSamples: 0,\r\n            samples: new Array<IKTX2_Sample>(),\r\n        });\r\n\r\n        dfdBlock.numSamples = (dfdBlock.descriptorBlockSize - 24) / 16;\r\n\r\n        for (let i = 0; i < dfdBlock.numSamples; i++) {\r\n            const sample = {\r\n                bitOffset: dfdReader.readUint16(),\r\n                bitLength: dfdReader.readUint8() + 1,\r\n                channelType: dfdReader.readUint8(),\r\n                channelFlags: 0,\r\n                samplePosition: [\r\n                    dfdReader.readUint8() /* samplePosition0 */,\r\n                    dfdReader.readUint8() /* samplePosition1 */,\r\n                    dfdReader.readUint8() /* samplePosition2 */,\r\n                    dfdReader.readUint8() /* samplePosition3 */,\r\n                ],\r\n                sampleLower: dfdReader.readUint32(),\r\n                sampleUpper: dfdReader.readUint32(),\r\n            };\r\n\r\n            sample.channelFlags = (sample.channelType & 0xf0) >> 4;\r\n            sample.channelType = sample.channelType & 0x0f;\r\n\r\n            dfdBlock.samples.push(sample);\r\n        }\r\n\r\n        /**\r\n         * Get the Supercompression Global Data (sgd)\r\n         */\r\n        const sgd: IKTX2_SupercompressionGlobalData = (this._supercompressionGlobalData = {});\r\n\r\n        if (header.sgdByteLength > 0) {\r\n            const sgdReader = new DataReader(this._data, header.sgdByteOffset, header.sgdByteLength);\r\n\r\n            sgd.endpointCount = sgdReader.readUint16();\r\n            sgd.selectorCount = sgdReader.readUint16();\r\n            sgd.endpointsByteLength = sgdReader.readUint32();\r\n            sgd.selectorsByteLength = sgdReader.readUint32();\r\n            sgd.tablesByteLength = sgdReader.readUint32();\r\n            sgd.extendedByteLength = sgdReader.readUint32();\r\n            sgd.imageDescs = [];\r\n\r\n            const imageCount = this._getImageCount();\r\n\r\n            for (let i = 0; i < imageCount; i++) {\r\n                sgd.imageDescs.push({\r\n                    imageFlags: sgdReader.readUint32(),\r\n                    rgbSliceByteOffset: sgdReader.readUint32(),\r\n                    rgbSliceByteLength: sgdReader.readUint32(),\r\n                    alphaSliceByteOffset: sgdReader.readUint32(),\r\n                    alphaSliceByteLength: sgdReader.readUint32(),\r\n                });\r\n            }\r\n\r\n            const endpointsByteOffset = header.sgdByteOffset + sgdReader.byteOffset;\r\n            const selectorsByteOffset = endpointsByteOffset + sgd.endpointsByteLength;\r\n            const tablesByteOffset = selectorsByteOffset + sgd.selectorsByteLength;\r\n            const extendedByteOffset = tablesByteOffset + sgd.tablesByteLength;\r\n\r\n            sgd.endpointsData = new Uint8Array(this._data.buffer, this._data.byteOffset + endpointsByteOffset, sgd.endpointsByteLength);\r\n            sgd.selectorsData = new Uint8Array(this._data.buffer, this._data.byteOffset + selectorsByteOffset, sgd.selectorsByteLength);\r\n            sgd.tablesData = new Uint8Array(this._data.buffer, this._data.byteOffset + tablesByteOffset, sgd.tablesByteLength);\r\n            sgd.extendedData = new Uint8Array(this._data.buffer, this._data.byteOffset + extendedByteOffset, sgd.extendedByteLength);\r\n        }\r\n    }\r\n\r\n    private _getImageCount(): number {\r\n        let layerPixelDepth = Math.max(this._header.pixelDepth, 1);\r\n        for (let i = 1; i < this._header.levelCount; i++) {\r\n            layerPixelDepth += Math.max(this._header.pixelDepth >> i, 1);\r\n        }\r\n\r\n        return Math.max(this._header.layerCount, 1) * this._header.faceCount * layerPixelDepth;\r\n    }\r\n\r\n    public get textureFormat(): sourceTextureFormat {\r\n        return this._dfdBlock.colorModel === DFDModel.UASTC ? sourceTextureFormat.UASTC4x4 : sourceTextureFormat.ETC1S;\r\n    }\r\n\r\n    public get hasAlpha(): boolean {\r\n        const tformat = this.textureFormat;\r\n\r\n        switch (tformat) {\r\n            case sourceTextureFormat.ETC1S:\r\n                return (\r\n                    this._dfdBlock.numSamples === 2 &&\r\n                    (this._dfdBlock.samples[0].channelType === DFDChannel_ETC1S.AAA || this._dfdBlock.samples[1].channelType === DFDChannel_ETC1S.AAA)\r\n                );\r\n\r\n            case sourceTextureFormat.UASTC4x4:\r\n                return this._dfdBlock.samples[0].channelType === DFDChannel_UASTC.RGBA;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public get needZSTDDecoder(): boolean {\r\n        return this._header.supercompressionScheme === SupercompressionScheme.ZStandard;\r\n    }\r\n\r\n    public get isInGammaSpace(): boolean {\r\n        return this._dfdBlock.transferFunction === DFDTransferFunction.sRGB;\r\n    }\r\n\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (\r\n                identifier[0] === 0xab &&\r\n                identifier[1] === 0x4b &&\r\n                identifier[2] === 0x54 &&\r\n                identifier[3] === 0x58 &&\r\n                identifier[4] === 0x20 &&\r\n                identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 &&\r\n                identifier[7] === 0xbb &&\r\n                identifier[8] === 0x0d &&\r\n                identifier[9] === 0x0a &&\r\n                identifier[10] === 0x1a &&\r\n                identifier[11] === 0x0a\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public get byteOffset() {\r\n        return this._dataByteOffset;\r\n    }\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to set\r\n     * @param byteOffset The starting offset in the buffer\r\n     * @param byteLength The byte length of the buffer\r\n     */\r\n    constructor(buffer: ArrayBuffer | ArrayBufferView, byteOffset?: number, byteLength?: number) {\r\n        if ((buffer as ArrayBufferView).buffer) {\r\n            this._dataView = new DataView(\r\n                (buffer as ArrayBufferView).buffer,\r\n                (buffer as ArrayBufferView).byteOffset + (byteOffset ?? 0),\r\n                byteLength ?? (buffer as ArrayBufferView).byteLength\r\n            );\r\n        } else {\r\n            this._dataView = new DataView(buffer as ArrayBuffer, byteOffset ?? 0, byteLength ?? (buffer as ArrayBuffer).byteLength);\r\n        }\r\n\r\n        this._dataByteOffset = 0;\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 8-bit integer from the currently loaded data range.\r\n     * @returns The 8-bit integer read\r\n     */\r\n    public readUint8(): number {\r\n        const value = this._dataView.getUint8(this._dataByteOffset);\r\n        this._dataByteOffset += 1;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a signed 8-bit integer from the currently loaded data range.\r\n     * @returns The 8-bit integer read\r\n     */\r\n    public readInt8(): number {\r\n        const value = this._dataView.getInt8(this._dataByteOffset);\r\n        this._dataByteOffset += 1;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 16-bit integer from the currently loaded data range.\r\n     * @returns The 16-bit integer read\r\n     */\r\n    public readUint16(): number {\r\n        const value = this._dataView.getUint16(this._dataByteOffset, true);\r\n        this._dataByteOffset += 2;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a signed 16-bit integer from the currently loaded data range.\r\n     * @returns The 16-bit integer read\r\n     */\r\n    public readInt16(): number {\r\n        const value = this._dataView.getInt16(this._dataByteOffset, true);\r\n        this._dataByteOffset += 2;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a signed 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readInt32(): number {\r\n        const value = this._dataView.getInt32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint64(): number {\r\n        // split 64-bit number into two 32-bit (4-byte) parts\r\n        const left = this._dataView.getUint32(this._dataByteOffset, true);\r\n        const right = this._dataView.getUint32(this._dataByteOffset + 4, true);\r\n\r\n        // combine the two 32-bit values\r\n        const combined = left + 2 ** 32 * right; // That was weird..Keeping it for posterity: true ? left + 2 ** 32 * right : 2 ** 32 * left + right;\r\n\r\n        /*if (!Number.isSafeInteger(combined)) {\r\n            console.warn('DataReader: ' + combined + ' exceeds MAX_SAFE_INTEGER. Precision may be lost.');\r\n        }*/\r\n\r\n        this._dataByteOffset += 8;\r\n        return combined;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     * @returns This instance\r\n     */\r\n    public skipBytes(byteLength: number) {\r\n        this._dataByteOffset += byteLength;\r\n        return this;\r\n    }\r\n}\r\n","declare function postMessage(message: any, transfer?: any[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class WASMMemoryManager {\r\n    public static LoadBinariesFromCurrentThread = true;\r\n    public static InitialMemoryPages = (1 * 1024 * 1024) >> 16; // 1 Mbytes\r\n\r\n    private static _RequestId = 0;\r\n\r\n    public static LoadWASM(path: string): Promise<ArrayBuffer> {\r\n        if (this.LoadBinariesFromCurrentThread) {\r\n            return new Promise((resolve, reject) => {\r\n                fetch(path)\r\n                    .then((response) => {\r\n                        if (response.ok) {\r\n                            return response.arrayBuffer();\r\n                        }\r\n                        throw new Error(`Could not fetch the wasm component from \"${path}\": ${response.status} - ${response.statusText}`);\r\n                    })\r\n                    .then((wasmBinary) => resolve(wasmBinary))\r\n                    .catch((reason) => {\r\n                        reject(reason);\r\n                    });\r\n            });\r\n        }\r\n\r\n        const id = this._RequestId++;\r\n\r\n        return new Promise((resolve) => {\r\n            const wasmLoadedHandler = (msg: any) => {\r\n                if (msg.data.action === \"wasmLoaded\" && msg.data.id === id) {\r\n                    self.removeEventListener(\"message\", wasmLoadedHandler);\r\n                    resolve(msg.data.wasmBinary);\r\n                }\r\n            };\r\n\r\n            self.addEventListener(\"message\", wasmLoadedHandler);\r\n\r\n            postMessage({ action: \"loadWASM\", path: path, id: id });\r\n        });\r\n    }\r\n\r\n    private _memory: WebAssembly.Memory;\r\n    private _numPages: number;\r\n    private _memoryView: Uint8Array;\r\n    private _memoryViewByteLength: number;\r\n    private _memoryViewOffset: number;\r\n\r\n    constructor(initialMemoryPages: number = WASMMemoryManager.InitialMemoryPages) {\r\n        this._numPages = initialMemoryPages;\r\n\r\n        this._memory = new WebAssembly.Memory({ initial: this._numPages });\r\n        this._memoryViewByteLength = this._numPages << 16;\r\n        this._memoryViewOffset = 0;\r\n        this._memoryView = new Uint8Array(this._memory.buffer, this._memoryViewOffset, this._memoryViewByteLength);\r\n    }\r\n\r\n    public get wasmMemory(): WebAssembly.Memory {\r\n        return this._memory;\r\n    }\r\n\r\n    public getMemoryView(numPages: number, offset: number = 0, byteLength?: number): Uint8Array {\r\n        byteLength = byteLength ?? numPages << 16;\r\n\r\n        if (this._numPages < numPages) {\r\n            this._memory.grow(numPages - this._numPages);\r\n            this._numPages = numPages;\r\n            this._memoryView = new Uint8Array(this._memory.buffer, offset, byteLength);\r\n            this._memoryViewByteLength = byteLength;\r\n            this._memoryViewOffset = offset;\r\n        } else {\r\n            this._memoryView = new Uint8Array(this._memory.buffer, offset, byteLength);\r\n            this._memoryViewByteLength = byteLength;\r\n            this._memoryViewOffset = offset;\r\n        }\r\n\r\n        return this._memoryView;\r\n    }\r\n}\r\n","import type { Transcoder } from \"./transcoder\";\r\nimport { transcodeTarget, sourceTextureFormat } from \"./transcoder\";\r\nimport { WASMMemoryManager } from \"./wasmMemoryManager\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class TranscoderManager {\r\n    public static _Transcoders: Array<typeof Transcoder> = [];\r\n\r\n    public static RegisterTranscoder(transcoder: typeof Transcoder) {\r\n        TranscoderManager._Transcoders.push(transcoder);\r\n    }\r\n\r\n    private static _TranscoderInstances: { [key: string]: Array<Transcoder> } = {};\r\n\r\n    private _wasmMemoryManager: WASMMemoryManager;\r\n\r\n    public findTranscoder(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean, bypass?: string[]): Transcoder | null {\r\n        let transcoder: Transcoder | null = null;\r\n\r\n        const key = sourceTextureFormat[src] + \"_\" + transcodeTarget[dst];\r\n\r\n        for (let i = 0; i < TranscoderManager._Transcoders.length; ++i) {\r\n            if (TranscoderManager._Transcoders[i].CanTranscode(src, dst, isInGammaSpace) && (!bypass || bypass.indexOf(TranscoderManager._Transcoders[i].Name) < 0)) {\r\n                transcoder = this._getExistingTranscoder(key, TranscoderManager._Transcoders[i].Name);\r\n                if (!transcoder) {\r\n                    transcoder = new TranscoderManager._Transcoders[i]();\r\n                    transcoder!.initialize();\r\n                    if (transcoder!.needMemoryManager()) {\r\n                        if (!this._wasmMemoryManager) {\r\n                            this._wasmMemoryManager = new WASMMemoryManager();\r\n                        }\r\n                        transcoder!.setMemoryManager(this._wasmMemoryManager);\r\n                    }\r\n                    if (!TranscoderManager._TranscoderInstances[key]) {\r\n                        TranscoderManager._TranscoderInstances[key] = [];\r\n                    }\r\n                    TranscoderManager._TranscoderInstances[key].push(transcoder);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return transcoder;\r\n    }\r\n\r\n    private _getExistingTranscoder(key: string, transcoderName: string): Transcoder | null {\r\n        const transcoders = TranscoderManager._TranscoderInstances[key];\r\n\r\n        if (transcoders) {\r\n            for (let t = 0; t < transcoders.length; ++t) {\r\n                const transcoder = transcoders[t];\r\n                if (transcoderName === transcoder.getName()) {\r\n                    return transcoder;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import type { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { Transcoder } from \"../transcoder\";\r\nimport { WASMMemoryManager } from \"../wasmMemoryManager\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class LiteTranscoder extends Transcoder {\r\n    private _modulePath: string;\r\n    private _modulePromise: Promise<{ module: any }>;\r\n    private _memoryManager: WASMMemoryManager;\r\n    protected _transcodeInPlace: boolean;\r\n\r\n    protected _loadModule(): Promise<{ module: any }> {\r\n        if (this._modulePromise) {\r\n            return this._modulePromise;\r\n        }\r\n\r\n        this._modulePromise = WASMMemoryManager.LoadWASM(this._modulePath).then((wasmBinary) => {\r\n            return new Promise((resolve) => {\r\n                WebAssembly.instantiate(wasmBinary as ArrayBuffer, { env: { memory: this._memoryManager.wasmMemory } }).then((moduleWrapper) => {\r\n                    resolve({ module: moduleWrapper.instance.exports });\r\n                });\r\n            });\r\n        });\r\n\r\n        return this._modulePromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected get memoryManager(): WASMMemoryManager {\r\n        return this._memoryManager;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected setModulePath(modulePath: string): void {\r\n        this._modulePath = modulePath;\r\n    }\r\n\r\n    public initialize(): void {\r\n        this._transcodeInPlace = true;\r\n    }\r\n\r\n    public needMemoryManager(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public setMemoryManager(memoryMgr: WASMMemoryManager): void {\r\n        this._memoryManager = memoryMgr;\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [textureView, uncompressedTextureView, nBlocks] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData);\r\n\r\n            return transcoder.transcode(nBlocks) === 0 ? (this._transcodeInPlace ? textureView.slice() : uncompressedTextureView!.slice()) : null;\r\n        });\r\n    }\r\n\r\n    protected _prepareTranscoding(\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        encodedData: Uint8Array,\r\n        uncompressedNumComponents?: number\r\n    ): [Uint8Array, Uint8Array | null, number] {\r\n        const nBlocks = ((width + 3) >> 2) * ((height + 3) >> 2);\r\n\r\n        if (uncompressedNumComponents !== undefined) {\r\n            uncompressedByteLength = width * ((height + 3) >> 2) * 4 * uncompressedNumComponents;\r\n        }\r\n\r\n        const texMemoryPages = ((nBlocks * 16 + 65535 + (this._transcodeInPlace ? 0 : uncompressedByteLength)) >> 16) + 1;\r\n\r\n        const textureView = this.memoryManager.getMemoryView(texMemoryPages, 65536, nBlocks * 16);\r\n\r\n        const uncompressedTextureView = this._transcodeInPlace\r\n            ? null\r\n            : new Uint8Array(\r\n                  this._memoryManager.wasmMemory.buffer,\r\n                  65536 + nBlocks * 16,\r\n                  uncompressedNumComponents !== undefined ? width * height * uncompressedNumComponents : uncompressedByteLength\r\n              );\r\n\r\n        textureView.set(encodedData);\r\n\r\n        return [textureView, uncompressedTextureView, nBlocks];\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_ASTC extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/uastc_astc.wasm\";\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.ASTC_4x4_RGBA;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_ASTC\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_ASTC.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this.setModulePath(LiteTranscoder_UASTC_ASTC.WasmModuleURL);\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_BC7 extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/uastc_bc7.wasm\";\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.BC7_RGBA;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_BC7\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_BC7.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this.setModulePath(LiteTranscoder_UASTC_BC7.WasmModuleURL);\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_RGBA_UNORM extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder (unorm)\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/uastc_rgba8_unorm_v2.wasm\";\r\n\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.RGBA32 && !isInGammaSpace;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_RGBA_UNORM\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_RGBA_UNORM.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this._transcodeInPlace = false;\r\n        this.setModulePath(LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL);\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [, uncompressedTextureView] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData, 4);\r\n\r\n            return transcoder.decode(width, height) === 0 ? uncompressedTextureView!.slice() : null;\r\n        });\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_RGBA_SRGB extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder (srgb)\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/uastc_rgba8_srgb_v2.wasm\";\r\n\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.RGBA32 && isInGammaSpace;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_RGBA_SRGB\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_RGBA_SRGB.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this._transcodeInPlace = false;\r\n        this.setModulePath(LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL);\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [, uncompressedTextureView] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData, 4);\r\n\r\n            return transcoder.decode(width, height) === 0 ? uncompressedTextureView!.slice() : null;\r\n        });\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_R8_UNORM extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder (srgb)\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/1/uastc_r8_unorm.wasm\";\r\n\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.R8;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_R8_UNORM\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_R8_UNORM.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this._transcodeInPlace = false;\r\n        this.setModulePath(LiteTranscoder_UASTC_R8_UNORM.WasmModuleURL);\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [, uncompressedTextureView] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData, 1);\r\n\r\n            return transcoder.decode(width, height) === 0 ? uncompressedTextureView!.slice() : null;\r\n        });\r\n    }\r\n}\r\n","import { sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport { LiteTranscoder } from \"./liteTranscoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class LiteTranscoder_UASTC_RG8_UNORM extends LiteTranscoder {\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder (srgb)\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/uastc_rg8_unorm.wasm\";\r\n\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return src === sourceTextureFormat.UASTC4x4 && dst === transcodeTarget.RG8;\r\n    }\r\n\r\n    public static Name = \"UniversalTranscoder_UASTC_RG8_UNORM\";\r\n\r\n    public getName(): string {\r\n        return LiteTranscoder_UASTC_RG8_UNORM.Name;\r\n    }\r\n\r\n    public initialize(): void {\r\n        super.initialize();\r\n        this._transcodeInPlace = false;\r\n        this.setModulePath(LiteTranscoder_UASTC_RG8_UNORM.WasmModuleURL);\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        return this._loadModule().then((moduleWrapper: any) => {\r\n            const transcoder: any = moduleWrapper.module;\r\n            const [, uncompressedTextureView] = this._prepareTranscoding(width, height, uncompressedByteLength, encodedData, 2);\r\n\r\n            return transcoder.decode(width, height) === 0 ? uncompressedTextureView!.slice() : null;\r\n        });\r\n    }\r\n}\r\n","import { Transcoder, sourceTextureFormat, transcodeTarget } from \"../transcoder\";\r\nimport type { KTX2FileReader, IKTX2_ImageDesc } from \"../ktx2FileReader\";\r\nimport { WASMMemoryManager } from \"../wasmMemoryManager\";\r\n\r\ndeclare let MSC_TRANSCODER: any;\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MSCTranscoder extends Transcoder {\r\n    /**\r\n     * URL to use when loading the MSC transcoder\r\n     */\r\n    public static JSModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/msc_basis_transcoder.js\";\r\n    /**\r\n     * URL to use when loading the wasm module for the transcoder\r\n     */\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/ktx2Transcoders/1/msc_basis_transcoder.wasm\";\r\n\r\n    public static UseFromWorkerThread = true;\r\n\r\n    public static Name = \"MSCTranscoder\";\r\n\r\n    public getName(): string {\r\n        return MSCTranscoder.Name;\r\n    }\r\n\r\n    private _mscBasisTranscoderPromise: Promise<void>;\r\n    private _mscBasisModule: any;\r\n\r\n    private _getMSCBasisTranscoder(): Promise<void> {\r\n        if (this._mscBasisTranscoderPromise) {\r\n            return this._mscBasisTranscoderPromise;\r\n        }\r\n\r\n        this._mscBasisTranscoderPromise = WASMMemoryManager.LoadWASM(MSCTranscoder.WasmModuleURL).then((wasmBinary) => {\r\n            if (MSCTranscoder.UseFromWorkerThread) {\r\n                importScripts(MSCTranscoder.JSModuleURL);\r\n            }\r\n            // Worker Number = 0 and MSC_TRANSCODER has not been loaded yet.\r\n            else if (typeof MSC_TRANSCODER === \"undefined\") {\r\n                return new Promise((resolve, reject) => {\r\n                    const head = document.getElementsByTagName(\"head\")[0];\r\n                    const script = document.createElement(\"script\");\r\n                    script.setAttribute(\"type\", \"text/javascript\");\r\n                    script.setAttribute(\"src\", MSCTranscoder.JSModuleURL);\r\n\r\n                    script.onload = () => {\r\n                        MSC_TRANSCODER({ wasmBinary }).then((basisModule: any) => {\r\n                            basisModule.initTranscoders();\r\n                            this._mscBasisModule = basisModule;\r\n                            resolve();\r\n                        });\r\n                    };\r\n\r\n                    script.onerror = () => {\r\n                        reject(\"Can not load MSC_TRANSCODER script.\");\r\n                    };\r\n\r\n                    head.appendChild(script);\r\n                });\r\n            }\r\n\r\n            return new Promise((resolve) => {\r\n                MSC_TRANSCODER({ wasmBinary }).then((basisModule: any) => {\r\n                    basisModule.initTranscoders();\r\n                    this._mscBasisModule = basisModule;\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n\r\n        return this._mscBasisTranscoderPromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static CanTranscode(src: sourceTextureFormat, dst: transcodeTarget, isInGammaSpace: boolean): boolean {\r\n        return true;\r\n    }\r\n\r\n    public transcode(\r\n        src: sourceTextureFormat,\r\n        dst: transcodeTarget,\r\n        level: number,\r\n        width: number,\r\n        height: number,\r\n        uncompressedByteLength: number,\r\n        ktx2Reader: KTX2FileReader,\r\n        imageDesc: IKTX2_ImageDesc | null,\r\n        encodedData: Uint8Array\r\n    ): Promise<Uint8Array | null> {\r\n        const isVideo = false;\r\n\r\n        return this._getMSCBasisTranscoder().then(() => {\r\n            const basisModule = this._mscBasisModule;\r\n\r\n            let transcoder: any;\r\n            let imageInfo: any;\r\n            let result: any;\r\n            let textureData: any = null;\r\n\r\n            try {\r\n                transcoder = src === sourceTextureFormat.UASTC4x4 ? new basisModule.UastcImageTranscoder() : new basisModule.BasisLzEtc1sImageTranscoder();\r\n                const texFormat = src === sourceTextureFormat.UASTC4x4 ? basisModule.TextureFormat.UASTC4x4 : basisModule.TextureFormat.ETC1S;\r\n\r\n                imageInfo = new basisModule.ImageInfo(texFormat, width, height, level);\r\n\r\n                const targetFormat = basisModule.TranscodeTarget[transcodeTarget[dst]]; // works because the labels of the sourceTextureFormat enum are the same as the property names used in TranscodeTarget!\r\n\r\n                if (!basisModule.isFormatSupported(targetFormat, texFormat)) {\r\n                    throw new Error(`MSCTranscoder: Transcoding from \"${sourceTextureFormat[src]}\" to \"${transcodeTarget[dst]}\" not supported by current transcoder build.`);\r\n                }\r\n\r\n                if (src === sourceTextureFormat.ETC1S) {\r\n                    const sgd = ktx2Reader.supercompressionGlobalData;\r\n\r\n                    transcoder.decodePalettes(sgd.endpointCount, sgd.endpointsData, sgd.selectorCount, sgd.selectorsData);\r\n                    transcoder.decodeTables(sgd.tablesData);\r\n\r\n                    imageInfo.flags = imageDesc!.imageFlags;\r\n                    imageInfo.rgbByteOffset = 0;\r\n                    imageInfo.rgbByteLength = imageDesc!.rgbSliceByteLength;\r\n                    imageInfo.alphaByteOffset = imageDesc!.alphaSliceByteOffset > 0 ? imageDesc!.rgbSliceByteLength : 0;\r\n                    imageInfo.alphaByteLength = imageDesc!.alphaSliceByteLength;\r\n\r\n                    result = transcoder.transcodeImage(targetFormat, encodedData, imageInfo, 0, isVideo);\r\n                } else {\r\n                    imageInfo.flags = 0;\r\n                    imageInfo.rgbByteOffset = 0;\r\n                    imageInfo.rgbByteLength = uncompressedByteLength;\r\n                    imageInfo.alphaByteOffset = 0;\r\n                    imageInfo.alphaByteLength = 0;\r\n\r\n                    result = transcoder.transcodeImage(targetFormat, encodedData, imageInfo, 0, ktx2Reader.hasAlpha, isVideo);\r\n                }\r\n            } finally {\r\n                if (transcoder) {\r\n                    transcoder.delete();\r\n                }\r\n\r\n                if (imageInfo) {\r\n                    imageInfo.delete();\r\n                }\r\n\r\n                if (result && result.transcodedImage) {\r\n                    textureData = result.transcodedImage.get_typed_memory_view().slice();\r\n                    result.transcodedImage.delete();\r\n                }\r\n            }\r\n\r\n            return textureData;\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * From https://github.com/donmccurdy/zstddec by Don McCurdy\r\n */\r\ninterface DecoderExports {\r\n    memory: Uint8Array;\r\n\r\n    ZSTD_findDecompressedSize: (compressedPtr: number, compressedSize: number) => number;\r\n    ZSTD_decompress: (uncompressedPtr: number, uncompressedSize: number, compressedPtr: number, compressedSize: number) => number;\r\n    malloc: (ptr: number) => number;\r\n    free: (ptr: number) => void;\r\n}\r\n\r\nlet init: Promise<void>;\r\nlet instance: { exports: DecoderExports };\r\nlet heap: Uint8Array;\r\n\r\nconst IMPORT_OBJECT = {\r\n    env: {\r\n        emscripten_notify_memory_growth: function (): void {\r\n            heap = new Uint8Array(instance.exports.memory.buffer);\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * ZSTD (Zstandard) decoder.\r\n */\r\nexport class ZSTDDecoder {\r\n    public static WasmModuleURL = \"https://preview.babylonjs.com/zstddec.wasm\";\r\n\r\n    init(): Promise<void> {\r\n        if (init) {\r\n            return init;\r\n        }\r\n\r\n        if (typeof fetch !== \"undefined\") {\r\n            // Web.\r\n\r\n            init = fetch(ZSTDDecoder.WasmModuleURL)\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        return response.arrayBuffer();\r\n                    }\r\n                    throw new Error(`Could not fetch the wasm component for the Zstandard decompression lib: ${response.status} - ${response.statusText}`);\r\n                })\r\n                .then((arrayBuffer) => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT))\r\n                .then(this._init);\r\n        } else {\r\n            // Node.js.\r\n\r\n            init = WebAssembly.instantiateStreaming(fetch(ZSTDDecoder.WasmModuleURL), IMPORT_OBJECT).then(this._init);\r\n        }\r\n\r\n        return init;\r\n    }\r\n\r\n    _init(result: WebAssembly.WebAssemblyInstantiatedSource): void {\r\n        instance = result.instance as unknown as { exports: DecoderExports };\r\n\r\n        IMPORT_OBJECT.env.emscripten_notify_memory_growth(); // initialize heap.\r\n    }\r\n\r\n    decode(array: Uint8Array, uncompressedSize = 0): Uint8Array {\r\n        if (!instance) {\r\n            throw new Error(`ZSTDDecoder: Await .init() before decoding.`);\r\n        }\r\n\r\n        // Write compressed data into WASM memory.\r\n        const compressedSize = array.byteLength;\r\n        const compressedPtr = instance.exports.malloc(compressedSize);\r\n        heap.set(array, compressedPtr);\r\n\r\n        // Decompress into WASM memory.\r\n        uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));\r\n        const uncompressedPtr = instance.exports.malloc(uncompressedSize);\r\n        const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);\r\n\r\n        // Read decompressed data and free WASM memory.\r\n        const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);\r\n        instance.exports.free(compressedPtr);\r\n        instance.exports.free(uncompressedPtr);\r\n\r\n        return dec;\r\n    }\r\n}\r\n\r\n/**\r\n * BSD License\r\n *\r\n * For Zstandard software\r\n *\r\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n *  * Neither the name Facebook nor the names of its contributors may be used to\r\n *    endorse or promote products derived from this software without specific\r\n *    prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { sourceTextureFormat, transcodeTarget } from \"./transcoder\";\r\n\r\nconst COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8e8c;\r\nconst COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93b0;\r\nconst COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83f0;\r\nconst COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83f3;\r\nconst COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8c02;\r\nconst COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8c00;\r\nconst COMPRESSED_RGBA8_ETC2_EAC = 0x9278;\r\nconst COMPRESSED_RGB8_ETC2 = 0x9274;\r\nconst COMPRESSED_RGB_ETC1_WEBGL = 0x8d64;\r\nconst RGBA8Format = 0x8058;\r\nconst R8Format = 0x8229;\r\nconst RG8Format = 0x822b;\r\n\r\ninterface ILeaf {\r\n    transcodeFormat: number;\r\n    engineFormat: number;\r\n    roundToMultiple4?: boolean;\r\n}\r\n\r\ninterface INode {\r\n    cap?: string;\r\n    option?: string;\r\n    alpha?: boolean;\r\n    needsPowerOfTwo?: boolean;\r\n    yes?: INode | ILeaf;\r\n    no?: INode | ILeaf;\r\n}\r\n\r\ninterface IDecisionTree {\r\n    [textureFormat: string]: INode;\r\n}\r\n\r\nconst DecisionTree: IDecisionTree = {\r\n    ETC1S: {\r\n        option: \"forceRGBA\",\r\n        yes: {\r\n            transcodeFormat: transcodeTarget.RGBA32,\r\n            engineFormat: RGBA8Format,\r\n            roundToMultiple4: false,\r\n        },\r\n        no: {\r\n            cap: \"etc2\",\r\n            yes: {\r\n                alpha: true,\r\n                yes: {\r\n                    transcodeFormat: transcodeTarget.ETC2_RGBA,\r\n                    engineFormat: COMPRESSED_RGBA8_ETC2_EAC,\r\n                },\r\n                no: {\r\n                    transcodeFormat: transcodeTarget.ETC1_RGB,\r\n                    engineFormat: COMPRESSED_RGB8_ETC2,\r\n                },\r\n            },\r\n            no: {\r\n                cap: \"etc1\",\r\n                alpha: false,\r\n                yes: {\r\n                    transcodeFormat: transcodeTarget.ETC1_RGB,\r\n                    engineFormat: COMPRESSED_RGB_ETC1_WEBGL,\r\n                },\r\n                no: {\r\n                    cap: \"bptc\",\r\n                    yes: {\r\n                        transcodeFormat: transcodeTarget.BC7_RGBA,\r\n                        engineFormat: COMPRESSED_RGBA_BPTC_UNORM_EXT,\r\n                    },\r\n                    no: {\r\n                        cap: \"s3tc\",\r\n                        yes: {\r\n                            alpha: true,\r\n                            yes: {\r\n                                transcodeFormat: transcodeTarget.BC3_RGBA,\r\n                                engineFormat: COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n                            },\r\n                            no: {\r\n                                transcodeFormat: transcodeTarget.BC1_RGB,\r\n                                engineFormat: COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n                            },\r\n                        },\r\n                        no: {\r\n                            cap: \"pvrtc\",\r\n                            needsPowerOfTwo: true,\r\n                            yes: {\r\n                                alpha: true,\r\n                                yes: {\r\n                                    transcodeFormat: transcodeTarget.PVRTC1_4_RGBA,\r\n                                    engineFormat: COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n                                },\r\n                                no: {\r\n                                    transcodeFormat: transcodeTarget.PVRTC1_4_RGB,\r\n                                    engineFormat: COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n                                },\r\n                            },\r\n                            no: {\r\n                                transcodeFormat: transcodeTarget.RGBA32,\r\n                                engineFormat: RGBA8Format,\r\n                                roundToMultiple4: false,\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n\r\n    UASTC: {\r\n        option: \"forceRGBA\",\r\n        yes: {\r\n            transcodeFormat: transcodeTarget.RGBA32,\r\n            engineFormat: RGBA8Format,\r\n            roundToMultiple4: false,\r\n        },\r\n        no: {\r\n            option: \"forceR8\",\r\n            yes: {\r\n                transcodeFormat: transcodeTarget.R8,\r\n                engineFormat: R8Format,\r\n                roundToMultiple4: false,\r\n            },\r\n            no: {\r\n                option: \"forceRG8\",\r\n                yes: {\r\n                    transcodeFormat: transcodeTarget.RG8,\r\n                    engineFormat: RG8Format,\r\n                    roundToMultiple4: false,\r\n                },\r\n                no: {\r\n                    cap: \"astc\",\r\n                    yes: {\r\n                        transcodeFormat: transcodeTarget.ASTC_4x4_RGBA,\r\n                        engineFormat: COMPRESSED_RGBA_ASTC_4x4_KHR,\r\n                    },\r\n                    no: {\r\n                        cap: \"bptc\",\r\n                        yes: {\r\n                            transcodeFormat: transcodeTarget.BC7_RGBA,\r\n                            engineFormat: COMPRESSED_RGBA_BPTC_UNORM_EXT,\r\n                        },\r\n                        no: {\r\n                            option: \"useRGBAIfASTCBC7NotAvailableWhenUASTC\",\r\n                            yes: {\r\n                                transcodeFormat: transcodeTarget.RGBA32,\r\n                                engineFormat: RGBA8Format,\r\n                                roundToMultiple4: false,\r\n                            },\r\n                            no: {\r\n                                cap: \"etc2\",\r\n                                yes: {\r\n                                    alpha: true,\r\n                                    yes: {\r\n                                        transcodeFormat: transcodeTarget.ETC2_RGBA,\r\n                                        engineFormat: COMPRESSED_RGBA8_ETC2_EAC,\r\n                                    },\r\n                                    no: {\r\n                                        transcodeFormat: transcodeTarget.ETC1_RGB,\r\n                                        engineFormat: COMPRESSED_RGB8_ETC2,\r\n                                    },\r\n                                },\r\n                                no: {\r\n                                    cap: \"etc1\",\r\n                                    yes: {\r\n                                        transcodeFormat: transcodeTarget.ETC1_RGB,\r\n                                        engineFormat: COMPRESSED_RGB_ETC1_WEBGL,\r\n                                    },\r\n                                    no: {\r\n                                        cap: \"s3tc\",\r\n                                        yes: {\r\n                                            alpha: true,\r\n                                            yes: {\r\n                                                transcodeFormat: transcodeTarget.BC3_RGBA,\r\n                                                engineFormat: COMPRESSED_RGBA_S3TC_DXT5_EXT,\r\n                                            },\r\n                                            no: {\r\n                                                transcodeFormat: transcodeTarget.BC1_RGB,\r\n                                                engineFormat: COMPRESSED_RGB_S3TC_DXT1_EXT,\r\n                                            },\r\n                                        },\r\n                                        no: {\r\n                                            cap: \"pvrtc\",\r\n                                            needsPowerOfTwo: true,\r\n                                            yes: {\r\n                                                alpha: true,\r\n                                                yes: {\r\n                                                    transcodeFormat: transcodeTarget.PVRTC1_4_RGBA,\r\n                                                    engineFormat: COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,\r\n                                                },\r\n                                                no: {\r\n                                                    transcodeFormat: transcodeTarget.PVRTC1_4_RGB,\r\n                                                    engineFormat: COMPRESSED_RGB_PVRTC_4BPPV1_IMG,\r\n                                                },\r\n                                            },\r\n                                            no: {\r\n                                                transcodeFormat: transcodeTarget.RGBA32,\r\n                                                engineFormat: RGBA8Format,\r\n                                                roundToMultiple4: false,\r\n                                            },\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nexport class TranscodeDecisionTree {\r\n    private static _IsLeafNode(node: INode | ILeaf): node is ILeaf {\r\n        return (node as ILeaf).transcodeFormat !== undefined;\r\n    }\r\n\r\n    private _hasAlpha: boolean;\r\n    private _isPowerOfTwo: boolean;\r\n    private _caps: any;\r\n    private _options: any;\r\n    private _transcodeFormat: number;\r\n    private _engineFormat: number;\r\n    private _roundToMultiple4: boolean;\r\n\r\n    public get transcodeFormat() {\r\n        return this._transcodeFormat;\r\n    }\r\n\r\n    public get engineFormat() {\r\n        return this._engineFormat;\r\n    }\r\n\r\n    public get roundToMultiple4() {\r\n        return this._roundToMultiple4;\r\n    }\r\n\r\n    constructor(textureFormat: sourceTextureFormat, hasAlpha: boolean, isPowerOfTwo: boolean, caps: any, options?: any) {\r\n        this._hasAlpha = hasAlpha;\r\n        this._isPowerOfTwo = isPowerOfTwo;\r\n        this._caps = caps;\r\n        this._options = options ?? {};\r\n\r\n        this._parseNode(textureFormat === sourceTextureFormat.UASTC4x4 ? DecisionTree.UASTC : DecisionTree.ETC1S);\r\n    }\r\n\r\n    private _parseNode(node: INode | ILeaf): void {\r\n        if (TranscodeDecisionTree._IsLeafNode(node)) {\r\n            this._transcodeFormat = node.transcodeFormat;\r\n            this._engineFormat = node.engineFormat;\r\n            this._roundToMultiple4 = node.roundToMultiple4 ?? true;\r\n        } else {\r\n            let condition = true;\r\n\r\n            if (node.cap !== undefined) {\r\n                condition = condition && this._caps[node.cap];\r\n            }\r\n            if (node.option !== undefined) {\r\n                condition = condition && this._options[node.option];\r\n            }\r\n            if (node.alpha !== undefined) {\r\n                condition = condition && this._hasAlpha === node.alpha;\r\n            }\r\n            if (node.needsPowerOfTwo !== undefined) {\r\n                condition = condition && this._isPowerOfTwo === node.needsPowerOfTwo;\r\n            }\r\n\r\n            this._parseNode(condition ? node.yes! : node.no!);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Resources used for the implementation:\r\n *  - 3js KTX2 loader: https://github.com/mrdoob/three.js/blob/dfb5c23ce126ec845e4aa240599915fef5375797/examples/jsm/loaders/KTX2Loader.js\r\n *  - Universal Texture Transcoders: https://github.com/KhronosGroup/Universal-Texture-Transcoders\r\n *  - KTX2 specification: http://github.khronos.org/KTX-Specification/\r\n *  - KTX2 binaries to convert files: https://github.com/KhronosGroup/KTX-Software/releases\r\n *  - KTX specification: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html\r\n *  - KTX-Software: https://github.com/KhronosGroup/KTX-Software\r\n */\r\n\r\nimport type { IKTX2_ImageDesc } from \"./ktx2FileReader\";\r\nimport { KTX2FileReader, SupercompressionScheme } from \"./ktx2FileReader\";\r\nimport { TranscoderManager } from \"./transcoderManager\";\r\nimport { LiteTranscoder_UASTC_ASTC } from \"./Transcoders/liteTranscoder_UASTC_ASTC\";\r\nimport { LiteTranscoder_UASTC_BC7 } from \"./Transcoders/liteTranscoder_UASTC_BC7\";\r\nimport { LiteTranscoder_UASTC_RGBA_UNORM } from \"./Transcoders/liteTranscoder_UASTC_RGBA_UNORM\";\r\nimport { LiteTranscoder_UASTC_RGBA_SRGB } from \"./Transcoders/liteTranscoder_UASTC_RGBA_SRGB\";\r\nimport { LiteTranscoder_UASTC_R8_UNORM } from \"./Transcoders/liteTranscoder_UASTC_R8_UNORM\";\r\nimport { LiteTranscoder_UASTC_RG8_UNORM } from \"./Transcoders/liteTranscoder_UASTC_RG8_UNORM\";\r\nimport { MSCTranscoder } from \"./Transcoders/mscTranscoder\";\r\nimport { transcodeTarget, sourceTextureFormat } from \"./transcoder\";\r\nimport { ZSTDDecoder } from \"./zstddec\";\r\nimport { TranscodeDecisionTree } from \"./transcodeDecisionTree\";\r\n\r\nexport interface IDecodedData {\r\n    width: number;\r\n    height: number;\r\n    transcodedFormat: number;\r\n    mipmaps: Array<IMipmap>;\r\n    isInGammaSpace: boolean;\r\n    hasAlpha: boolean;\r\n    errors?: string;\r\n    transcoderName?: string;\r\n}\r\n\r\nexport interface IMipmap {\r\n    data: Uint8Array | null;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface ICompressedFormatCapabilities {\r\n    astc?: boolean;\r\n    bptc?: boolean;\r\n    s3tc?: boolean;\r\n    pvrtc?: boolean;\r\n    etc2?: boolean;\r\n    etc1?: boolean;\r\n}\r\n\r\nexport interface IKTX2DecoderOptions {\r\n    /** use RGBA format if ASTC and BC7 are not available as transcoded format */\r\n    useRGBAIfASTCBC7NotAvailableWhenUASTC?: boolean;\r\n\r\n    /** force to always use (uncompressed) RGBA for transcoded format */\r\n    forceRGBA?: boolean;\r\n\r\n    /** force to always use (uncompressed) R8 for transcoded format */\r\n    forceR8?: boolean;\r\n\r\n    /** force to always use (uncompressed) RG8 for transcoded format */\r\n    forceRG8?: boolean;\r\n\r\n    /**\r\n     * list of transcoders to bypass when looking for a suitable transcoder. The available transcoders are:\r\n     *      UniversalTranscoder_UASTC_ASTC\r\n     *      UniversalTranscoder_UASTC_BC7\r\n     *      UniversalTranscoder_UASTC_RGBA_UNORM\r\n     *      UniversalTranscoder_UASTC_RGBA_SRGB\r\n     *      UniversalTranscoder_UASTC_R8_UNORM\r\n     *      UniversalTranscoder_UASTC_RG8_UNORM\r\n     *      MSCTranscoder\r\n     */\r\n    bypassTranscoders?: string[];\r\n}\r\n\r\nconst isPowerOfTwo = (value: number) => {\r\n    return (value & (value - 1)) === 0 && value !== 0;\r\n};\r\n\r\n/**\r\n * Class for decoding KTX2 files\r\n *\r\n */\r\nexport class KTX2Decoder {\r\n    private _transcoderMgr: TranscoderManager;\r\n    private _zstdDecoder: ZSTDDecoder;\r\n\r\n    constructor() {\r\n        this._transcoderMgr = new TranscoderManager();\r\n    }\r\n\r\n    public decode(data: Uint8Array, caps: ICompressedFormatCapabilities, options?: IKTX2DecoderOptions): Promise<IDecodedData | null> {\r\n        return Promise.resolve().then(() => {\r\n            const kfr = new KTX2FileReader(data);\r\n\r\n            if (!kfr.isValid()) {\r\n                throw new Error(\"Invalid KT2 file: wrong signature\");\r\n            }\r\n\r\n            kfr.parse();\r\n\r\n            if (kfr.needZSTDDecoder) {\r\n                if (!this._zstdDecoder) {\r\n                    this._zstdDecoder = new ZSTDDecoder();\r\n                }\r\n\r\n                return this._zstdDecoder.init().then(() => {\r\n                    return this._decodeData(kfr, caps, options);\r\n                });\r\n            }\r\n\r\n            return this._decodeData(kfr, caps, options);\r\n        });\r\n    }\r\n\r\n    private _decodeData(kfr: KTX2FileReader, caps: ICompressedFormatCapabilities, options?: IKTX2DecoderOptions): Promise<IDecodedData> {\r\n        const width = kfr.header.pixelWidth;\r\n        const height = kfr.header.pixelHeight;\r\n        const srcTexFormat = kfr.textureFormat;\r\n\r\n        const decisionTree = new TranscodeDecisionTree(srcTexFormat, kfr.hasAlpha, isPowerOfTwo(width) && isPowerOfTwo(height), caps, options);\r\n\r\n        const transcodeFormat = decisionTree.transcodeFormat;\r\n        const engineFormat = decisionTree.engineFormat;\r\n        const roundToMultiple4 = decisionTree.roundToMultiple4;\r\n\r\n        const transcoder = this._transcoderMgr.findTranscoder(srcTexFormat, transcodeFormat, kfr.isInGammaSpace, options?.bypassTranscoders);\r\n\r\n        if (transcoder === null) {\r\n            throw new Error(`no transcoder found to transcode source texture format \"${sourceTextureFormat[srcTexFormat]}\" to format \"${transcodeTarget[transcodeFormat]}\"`);\r\n        }\r\n\r\n        const mipmaps: Array<IMipmap> = [];\r\n        const dataPromises: Array<Promise<Uint8Array | null>> = [];\r\n        const decodedData: IDecodedData = {\r\n            width: 0,\r\n            height: 0,\r\n            transcodedFormat: engineFormat,\r\n            mipmaps,\r\n            isInGammaSpace: kfr.isInGammaSpace,\r\n            hasAlpha: kfr.hasAlpha,\r\n            transcoderName: transcoder.getName(),\r\n        };\r\n\r\n        let firstImageDescIndex = 0;\r\n\r\n        for (let level = 0; level < kfr.header.levelCount; level++) {\r\n            if (level > 0) {\r\n                firstImageDescIndex += Math.max(kfr.header.layerCount, 1) * kfr.header.faceCount * Math.max(kfr.header.pixelDepth >> (level - 1), 1);\r\n            }\r\n\r\n            const levelWidth = Math.floor(width / (1 << level)) || 1;\r\n            const levelHeight = Math.floor(height / (1 << level)) || 1;\r\n\r\n            const numImagesInLevel = kfr.header.faceCount; // note that cubemap are not supported yet (see KTX2FileReader), so faceCount == 1\r\n            const levelImageByteLength = ((levelWidth + 3) >> 2) * ((levelHeight + 3) >> 2) * kfr.dfdBlock.bytesPlane[0];\r\n\r\n            const levelUncompressedByteLength = kfr.levels[level].uncompressedByteLength;\r\n\r\n            let levelDataBuffer = kfr.data.buffer;\r\n\r\n            let levelDataOffset = kfr.levels[level].byteOffset + kfr.data.byteOffset;\r\n            let imageOffsetInLevel = 0;\r\n\r\n            if (kfr.header.supercompressionScheme === SupercompressionScheme.ZStandard) {\r\n                levelDataBuffer = this._zstdDecoder.decode(new Uint8Array(levelDataBuffer, levelDataOffset, kfr.levels[level].byteLength), levelUncompressedByteLength);\r\n                levelDataOffset = 0;\r\n            }\r\n\r\n            if (level === 0) {\r\n                decodedData.width = roundToMultiple4 ? (levelWidth + 3) & ~3 : levelWidth;\r\n                decodedData.height = roundToMultiple4 ? (levelHeight + 3) & ~3 : levelHeight;\r\n            }\r\n\r\n            for (let imageIndex = 0; imageIndex < numImagesInLevel; imageIndex++) {\r\n                let encodedData: Uint8Array;\r\n                let imageDesc: IKTX2_ImageDesc | null = null;\r\n\r\n                if (kfr.header.supercompressionScheme === SupercompressionScheme.BasisLZ) {\r\n                    imageDesc = kfr.supercompressionGlobalData.imageDescs![firstImageDescIndex + imageIndex];\r\n\r\n                    encodedData = new Uint8Array(levelDataBuffer, levelDataOffset + imageDesc.rgbSliceByteOffset, imageDesc.rgbSliceByteLength + imageDesc.alphaSliceByteLength);\r\n                } else {\r\n                    encodedData = new Uint8Array(levelDataBuffer, levelDataOffset + imageOffsetInLevel, levelImageByteLength);\r\n\r\n                    imageOffsetInLevel += levelImageByteLength;\r\n                }\r\n\r\n                const mipmap: IMipmap = {\r\n                    data: null,\r\n                    width: levelWidth,\r\n                    height: levelHeight,\r\n                };\r\n\r\n                const transcodedData = transcoder\r\n                    .transcode(srcTexFormat, transcodeFormat, level, levelWidth, levelHeight, levelUncompressedByteLength, kfr, imageDesc, encodedData)\r\n                    .then((data) => {\r\n                        mipmap.data = data;\r\n                        return data;\r\n                    })\r\n                    .catch((reason) => {\r\n                        decodedData.errors = decodedData.errors ?? \"\";\r\n                        decodedData.errors += reason + \"\\n\" + reason.stack + \"\\n\";\r\n                        return null;\r\n                    });\r\n\r\n                dataPromises.push(transcodedData);\r\n\r\n                mipmaps.push(mipmap);\r\n            }\r\n        }\r\n\r\n        return Promise.all(dataPromises).then(() => {\r\n            return decodedData;\r\n        });\r\n    }\r\n}\r\n\r\n// Put in the order you want the transcoders to be used in priority\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_ASTC);\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_BC7);\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_RGBA_UNORM);\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_RGBA_SRGB);\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_R8_UNORM);\r\nTranscoderManager.RegisterTranscoder(LiteTranscoder_UASTC_RG8_UNORM);\r\nTranscoderManager.RegisterTranscoder(MSCTranscoder); // catch all transcoder - will throw an error if the format can't be transcoded\r\n","/* eslint-disable import/no-internal-modules */\r\nimport { KTX2Decoder } from \"../index\";\r\n\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).KTX2DECODER = KTX2Decoder;\r\n}\r\n\r\nexport * from \"../index\";\r\n","import * as ktx2decoder from \"ktx2decoder/legacy/legacy\";\r\n\r\nexport { ktx2decoder };\r\nexport default ktx2decoder;\r\n"],"names":["root","factory","exports","module","define","amd","self","global","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","sourceTextureFormat","transcodeTarget","SupercompressionScheme","DataReader","constructor","buffer","byteOffset","byteLength","_dataView","DataView","_dataByteOffset","readUint8","getUint8","readInt8","getInt8","readUint16","getUint16","readInt16","getInt16","readUint32","getUint32","readInt32","getInt32","readUint64","combined","readUint8Array","Uint8Array","skipBytes","Transcoder","static","src","dst","isInGammaSpace","getName","Name","initialize","needMemoryManager","setMemoryManager","memoryMgr","transcode","level","width","height","uncompressedByteLength","ktx2Reader","imageDesc","encodedData","Promise","resolve","KTX2FileReader","data","_data","header","_header","levels","_levels","dfdBlock","_dfdBlock","supercompressionGlobalData","_supercompressionGlobalData","isValid","IsValid","parse","offsetInFile","hdrReader","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","levelCount","supercompressionScheme","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","Error","Math","max","levelReader","push","dfdReader","vendorId","descriptorType","versionNumber","descriptorBlockSize","colorModel","colorPrimaries","transferFunction","flags","texelBlockDimension","x","y","z","w","bytesPlane","numSamples","samples","Array","i","sample","bitOffset","bitLength","channelType","channelFlags","samplePosition","sampleLower","sampleUpper","sgd","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageCount","_getImageCount","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","layerPixelDepth","textureFormat","UASTC4x4","ETC1S","hasAlpha","needZSTDDecoder","ZStandard","identifier","WASMMemoryManager","initialMemoryPages","InitialMemoryPages","_numPages","_memory","WebAssembly","Memory","initial","_memoryViewByteLength","_memoryViewOffset","_memoryView","path","LoadBinariesFromCurrentThread","reject","fetch","then","response","ok","arrayBuffer","status","statusText","wasmBinary","catch","reason","id","_RequestId","wasmLoadedHandler","msg","action","removeEventListener","addEventListener","postMessage","wasmMemory","getMemoryView","numPages","offset","grow","TranscoderManager","transcoder","_Transcoders","findTranscoder","bypass","length","CanTranscode","indexOf","_getExistingTranscoder","_wasmMemoryManager","_TranscoderInstances","transcoderName","transcoders","t","LiteTranscoder","_loadModule","_modulePromise","LoadWASM","_modulePath","instantiate","env","memory","_memoryManager","moduleWrapper","instance","memoryManager","setModulePath","modulePath","_transcodeInPlace","textureView","uncompressedTextureView","nBlocks","_prepareTranscoding","slice","uncompressedNumComponents","undefined","texMemoryPages","set","LiteTranscoder_UASTC_ASTC","ASTC_4x4_RGBA","super","WasmModuleURL","LiteTranscoder_UASTC_BC7","BC7_RGBA","LiteTranscoder_UASTC_RGBA_UNORM","RGBA32","decode","LiteTranscoder_UASTC_RGBA_SRGB","LiteTranscoder_UASTC_R8_UNORM","R8","LiteTranscoder_UASTC_RG8_UNORM","RG8","MSCTranscoder","_getMSCBasisTranscoder","_mscBasisTranscoderPromise","UseFromWorkerThread","importScripts","JSModuleURL","MSC_TRANSCODER","head","document","getElementsByTagName","script","createElement","setAttribute","onload","basisModule","initTranscoders","_mscBasisModule","onerror","appendChild","imageInfo","result","textureData","UastcImageTranscoder","BasisLzEtc1sImageTranscoder","texFormat","TextureFormat","ImageInfo","targetFormat","TranscodeTarget","isFormatSupported","decodePalettes","decodeTables","rgbByteOffset","rgbByteLength","alphaByteOffset","alphaByteLength","transcodeImage","delete","transcodedImage","get_typed_memory_view","init","heap","IMPORT_OBJECT","emscripten_notify_memory_growth","ZSTDDecoder","_init","instantiateStreaming","array","uncompressedSize","compressedSize","compressedPtr","malloc","Number","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","free","RGBA8Format","DecisionTree","option","yes","transcodeFormat","engineFormat","roundToMultiple4","no","cap","alpha","ETC2_RGBA","ETC1_RGB","BC3_RGBA","BC1_RGB","needsPowerOfTwo","PVRTC1_4_RGBA","PVRTC1_4_RGB","UASTC","TranscodeDecisionTree","isPowerOfTwo","caps","options","_hasAlpha","_isPowerOfTwo","_caps","_options","_parseNode","node","_transcodeFormat","_engineFormat","_roundToMultiple4","_IsLeafNode","condition","KTX2Decoder","_transcoderMgr","kfr","_zstdDecoder","_decodeData","srcTexFormat","decisionTree","bypassTranscoders","mipmaps","dataPromises","decodedData","transcodedFormat","firstImageDescIndex","levelWidth","floor","levelHeight","numImagesInLevel","levelImageByteLength","levelUncompressedByteLength","levelDataBuffer","levelDataOffset","imageOffsetInLevel","imageIndex","BasisLZ","mipmap","transcodedData","errors","stack","all","RegisterTranscoder","globalObject","KTX2DECODER"],"sourceRoot":""}