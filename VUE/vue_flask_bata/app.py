from flask import (    request,    Response,    session,)from def_function._init_function import admin_rigister,resource_add,get_time,comment_addfrom apps import create_app,create_db# from model import UserModel,SourceModel,CatureModel,CommentModel# print("app调用model")from blueprints.comment_list import bp as comment_bp  # 导入蓝图模板from blueprints.user_list import bp as user_bp  # 导入蓝图模板from blueprints.source_list import bp as source_bp# 使用flask创建一个app对象并传递__name__参数app= create_app()db = create_db()# 通过app绑定到/组装/注册蓝图app.register_blueprint(comment_bp)app.register_blueprint(user_bp)app.register_blueprint(source_bp)# 设置cookie值# @app.route("/set_cookie")def set_cookit():    res = Response("cookie 设置")    res.set_cookie("user_id",get_time(),300)  # 键值对 和过期时间    res.set_cookie("user",'xxx', 300)  # 键值对 和过期时间    res.set_cookie("nowtime",get_time(), 300)  # 键值对 和过期时间    return res# 获取cookie值# @app.route("/get_cookie")def get_cookit():    try:        getcookit = []        c = {            "user_id",            "user",            "nowtime",        }        # user_id = request.cookies.get("user_id")        # t = request.cookies.get("user")        # c = request.cookies.get("nowtime")        for i in c:            test = request.cookies.get(i)            getcookit.append(test)    except Exception as e:        print(e)    return getcookit# 设置session 把数据加密 再用session_id作为key， 存放在cookie中# @app.route("/set_session")def set_session():    session['user_id'] = get_time()    session["NAME"] = "lhk"    return "设置session成功"# 获取session值并解析# @app.route("/get_session")def get_session():    try:        getsession = []        user_id = session.get("user_id")        # print(session.get("NAME"))        # print(user_id)        for i in ("user_id","NAME"):            getsession.append(session.get(i))    except Exception as e:        print(e)    return getsession# 请求前 设置全局变量g 获取user_id的值 再去数据库绑定user 再用g取获取用户名# @app.before_request# def before_request():#     user_id = session.get('user_id')#     if user:#         try:#             user = UserModel.query.get(user_id)#             # 给g绑定一个user变量的值#             # setattr(g,"user",user)#             # 全局变量g#             g.user = user#         except:#             g.user = None# 请求来了->before_request->视图函数->视图函数中返回模板->context_processor# 上下文处理器 渲染所有模板都会执行这个# @app.context_processor# def context_processor():#     if hasattr(g, "user"):#         print(g.user.username)#         return {"user": g.user}#     else:#         return {}#  请求后# @app.after_request# def apply_caching(response):#     response.headers.add('Access-Control-Allow-Origin','http://127.0.0.1:5000')#带cookie的话，不能写*#     response.headers.add("Access-Control-Allow-Credentials", 'true') # 允许带cookie#     # 这里不能使用add方法，否则会出现 The 'Access-Control-Allow-Origin' header contains multiple values 的问题#     # response.headers['Access-Control-Allow-Origin'] = '*',#     return response# @app.route('/')# def hello_world():#     set_session()#     set_cookit()#     get_cookit()#     get_session()#     t1 = json.dumps(get_session())#     t2 = json.dumps(get_cookit())#     t3 = t1 +'--'+ t2#     return t3@app.route('/_init_new_data')def create_new_mysql():    # 6.删除继承子db.Model的表    db.drop_all()    # 5.创建表    db.create_all()    admin_rigister()    resource_add()    comment_add()    return {"message": '初始化成功'}    # 返回一个json格式数据 return {"books": '知道'}if __name__ == '__main__':    try:        app.run()    except Exception as f:        print("初始化失败")