{"version":3,"file":"babylon.objSerializer.min.js","mappings":"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","sources":["webpack://SERIALIZERS/webpack/universalModuleDefinition","webpack://SERIALIZERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://SERIALIZERS/webpack/bootstrap","webpack://SERIALIZERS/webpack/runtime/define property getters","webpack://SERIALIZERS/webpack/runtime/global","webpack://SERIALIZERS/webpack/runtime/hasOwnProperty shorthand","webpack://SERIALIZERS/webpack/runtime/make namespace object","webpack://SERIALIZERS/../../../lts/serializers/generated/OBJ/objSerializer.ts","webpack://SERIALIZERS/../../../lts/serializers/generated/legacy/legacy-objSerializer.ts","webpack://SERIALIZERS/./src/obj.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-serializers\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-serializers\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"SERIALIZERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__520__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__520__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { Nullable } from \"core/types\";\r\nimport { Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\n/**\r\n * Class for generating OBJ data from a Babylon scene.\r\n */\r\nexport class OBJExport {\r\n    /**\r\n     * Exports the geometry of a Mesh array in .OBJ file format (text)\r\n     * @param mesh defines the list of meshes to serialize\r\n     * @param materials defines if materials should be exported\r\n     * @param matlibname defines the name of the associated mtl file\r\n     * @param globalposition defines if the exported positions are globals or local to the exported mesh\r\n     * @returns the OBJ content\r\n     */\r\n    public static OBJ(mesh: Mesh[], materials?: boolean, matlibname?: string, globalposition?: boolean): string {\r\n        const output: string[] = [];\r\n        let v = 1;\r\n        // keep track of uv index in case mixed meshes are passed in\r\n        let textureV = 1;\r\n\r\n        if (materials) {\r\n            if (!matlibname) {\r\n                matlibname = \"mat\";\r\n            }\r\n            output.push(\"mtllib \" + matlibname + \".mtl\");\r\n        }\r\n        for (let j = 0; j < mesh.length; j++) {\r\n            output.push(\"g object\" + j);\r\n            output.push(\"o object_\" + j);\r\n\r\n            //Uses the position of the item in the scene, to the file (this back to normal in the end)\r\n            let inverseTransform: Nullable<Matrix> = null;\r\n            if (globalposition) {\r\n                const transform = mesh[j].computeWorldMatrix(true);\r\n                inverseTransform = new Matrix();\r\n                transform.invertToRef(inverseTransform);\r\n\r\n                mesh[j].bakeTransformIntoVertices(transform);\r\n            }\r\n\r\n            //TODO: submeshes (groups)\r\n            //TODO: smoothing groups (s 1, s off);\r\n            if (materials) {\r\n                const mat = mesh[j].material;\r\n\r\n                if (mat) {\r\n                    output.push(\"usemtl \" + mat.id);\r\n                }\r\n            }\r\n            const g: Nullable<Geometry> = mesh[j].geometry;\r\n\r\n            if (!g) {\r\n                Tools.Warn(\"No geometry is present on the mesh\");\r\n                continue;\r\n            }\r\n\r\n            const trunkVerts = g.getVerticesData(\"position\");\r\n            const trunkNormals = g.getVerticesData(\"normal\");\r\n            const trunkUV = g.getVerticesData(\"uv\");\r\n            const trunkFaces = g.getIndices();\r\n            let currentV = 0;\r\n            let currentTextureV = 0;\r\n\r\n            if (!trunkVerts || !trunkFaces) {\r\n                Tools.Warn(\"There are no position vertices or indices on the mesh!\");\r\n                continue;\r\n            }\r\n\r\n            for (let i = 0; i < trunkVerts.length; i += 3) {\r\n                // Babylon.js default is left handed, while OBJ default is right handed\r\n                // Need to invert Z vertices unless Babylon is set to use a right handed system\r\n                if (mesh[0].getScene().useRightHandedSystem) {\r\n                    output.push(\"v \" + trunkVerts[i] + \" \" + trunkVerts[i + 1] + \" \" + trunkVerts[i + 2]);\r\n                } else {\r\n                    output.push(\"v \" + trunkVerts[i] + \" \" + trunkVerts[i + 1] + \" \" + -trunkVerts[i + 2]);\r\n                }\r\n                currentV++;\r\n            }\r\n\r\n            if (trunkNormals != null) {\r\n                for (let i = 0; i < trunkNormals.length; i += 3) {\r\n                    output.push(\"vn \" + trunkNormals[i] + \" \" + trunkNormals[i + 1] + \" \" + trunkNormals[i + 2]);\r\n                }\r\n            }\r\n            if (trunkUV != null) {\r\n                for (let i = 0; i < trunkUV.length; i += 2) {\r\n                    output.push(\"vt \" + trunkUV[i] + \" \" + trunkUV[i + 1]);\r\n                    currentTextureV++;\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < trunkFaces.length; i += 3) {\r\n                const indices = [String(trunkFaces[i + 2] + v), String(trunkFaces[i + 1] + v), String(trunkFaces[i] + v)];\r\n                const textureIndices = [String(trunkFaces[i + 2] + textureV), String(trunkFaces[i + 1] + textureV), String(trunkFaces[i] + textureV)];\r\n                const blanks: string[] = [\"\", \"\", \"\"];\r\n\r\n                const facePositions = indices;\r\n                const faceUVs = trunkUV != null ? textureIndices : blanks;\r\n                const faceNormals = trunkNormals != null ? indices : blanks;\r\n\r\n                output.push(\r\n                    \"f \" +\r\n                        facePositions[0] +\r\n                        \"/\" +\r\n                        faceUVs[0] +\r\n                        \"/\" +\r\n                        faceNormals[0] +\r\n                        \" \" +\r\n                        facePositions[1] +\r\n                        \"/\" +\r\n                        faceUVs[1] +\r\n                        \"/\" +\r\n                        faceNormals[1] +\r\n                        \" \" +\r\n                        facePositions[2] +\r\n                        \"/\" +\r\n                        faceUVs[2] +\r\n                        \"/\" +\r\n                        faceNormals[2]\r\n                );\r\n            }\r\n            //back de previous matrix, to not change the original mesh in the scene\r\n            if (globalposition && inverseTransform) {\r\n                mesh[j].bakeTransformIntoVertices(inverseTransform);\r\n            }\r\n            v += currentV;\r\n            textureV += currentTextureV;\r\n        }\r\n        const text: string = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Exports the material(s) of a mesh in .MTL file format (text)\r\n     * @param mesh defines the mesh to extract the material from\r\n     * @returns the mtl content\r\n     */\r\n    //TODO: Export the materials of mesh array\r\n    public static MTL(mesh: Mesh): string {\r\n        const output = [];\r\n        const m = <StandardMaterial>mesh.material;\r\n        output.push(\"newmtl mat1\");\r\n        output.push(\"  Ns \" + m.specularPower.toFixed(4));\r\n        output.push(\"  Ni 1.5000\");\r\n        output.push(\"  d \" + m.alpha.toFixed(4));\r\n        output.push(\"  Tr 0.0000\");\r\n        output.push(\"  Tf 1.0000 1.0000 1.0000\");\r\n        output.push(\"  illum 2\");\r\n        output.push(\"  Ka \" + m.ambientColor.r.toFixed(4) + \" \" + m.ambientColor.g.toFixed(4) + \" \" + m.ambientColor.b.toFixed(4));\r\n        output.push(\"  Kd \" + m.diffuseColor.r.toFixed(4) + \" \" + m.diffuseColor.g.toFixed(4) + \" \" + m.diffuseColor.b.toFixed(4));\r\n        output.push(\"  Ks \" + m.specularColor.r.toFixed(4) + \" \" + m.specularColor.g.toFixed(4) + \" \" + m.specularColor.b.toFixed(4));\r\n        output.push(\"  Ke \" + m.emissiveColor.r.toFixed(4) + \" \" + m.emissiveColor.g.toFixed(4) + \" \" + m.emissiveColor.b.toFixed(4));\r\n\r\n        //TODO: uv scale, offset, wrap\r\n        //TODO: UV mirrored in Blender? second UV channel? lightMap? reflection textures?\r\n        const uvscale = \"\";\r\n\r\n        if (m.ambientTexture) {\r\n            output.push(\"  map_Ka \" + uvscale + m.ambientTexture.name);\r\n        }\r\n\r\n        if (m.diffuseTexture) {\r\n            output.push(\"  map_Kd \" + uvscale + m.diffuseTexture.name);\r\n            //TODO: alpha testing, opacity in diffuse texture alpha channel (diffuseTexture.hasAlpha -> map_d)\r\n        }\r\n\r\n        if (m.specularTexture) {\r\n            output.push(\"  map_Ks \" + uvscale + m.specularTexture.name);\r\n            /* TODO: glossiness = specular highlight component is in alpha channel of specularTexture. (???)\r\n            if (m.useGlossinessFromSpecularMapAlpha)  {\r\n                output.push(\"  map_Ns \"+uvscale + m.specularTexture.name);\r\n            }\r\n            */\r\n        }\r\n\r\n        /* TODO: emissive texture not in .MAT format (???)\r\n        if (m.emissiveTexture) {\r\n            output.push(\"  map_d \"+uvscale+m.emissiveTexture.name);\r\n        }\r\n        */\r\n\r\n        if (m.bumpTexture) {\r\n            output.push(\"  map_bump -imfchan z \" + uvscale + m.bumpTexture.name);\r\n        }\r\n\r\n        if (m.opacityTexture) {\r\n            output.push(\"  map_d \" + uvscale + m.opacityTexture.name);\r\n        }\r\n\r\n        const text = output.join(\"\\n\");\r\n        return text;\r\n    }\r\n}\r\n","/* eslint-disable import/no-internal-modules */\nimport * as Serializers from \"../OBJ/index\";\n/**\n * This is the entry point for the UMD module.\n * The entry point for a future ESM package should be index.ts\n */\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\nif (typeof globalObject !== \"undefined\") {\n    for (const serializer in Serializers) {\n        (<any>globalObject).BABYLON[serializer] = (<any>Serializers)[serializer];\n    }\n}\nexport * from \"../OBJ/index\";\n","import * as serializers from \"serializers/legacy/legacy-objSerializer\";\r\nexport { serializers };\r\nexport default serializers;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__520__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","OBJ","mesh","materials","matlibname","globalposition","output","v","textureV","push","j","length","inverseTransform","transform","computeWorldMatrix","Matrix","invertToRef","bakeTransformIntoVertices","mat","material","id","geometry","trunkVerts","getVerticesData","trunkNormals","trunkUV","trunkFaces","getIndices","currentV","currentTextureV","i","getScene","useRightHandedSystem","indices","String","textureIndices","blanks","facePositions","faceUVs","faceNormals","Tools","join","MTL","m","specularPower","toFixed","alpha","ambientColor","b","diffuseColor","specularColor","emissiveColor","ambientTexture","name","diffuseTexture","specularTexture","bumpTexture","opacityTexture","globalObject","serializer","BABYLON"],"sourceRoot":""}